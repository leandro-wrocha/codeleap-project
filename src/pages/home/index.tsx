import Head from "next/head";
import { FaEdit, FaTrash } from "react-icons/fa";

import styles from '@/styles/home.module.scss';

import { useEffect, useState } from "react";
import { ModalConfirmDelete } from "@/components/home/modals/confirm-delete";
import { ModalEditPost } from "@/components/home/modals/edit";
import { api } from "@/actions/api";
import axios from "axios";
import { useAuth } from "@/contexts/AuthProvider";
import { useForm } from "react-hook-form";

interface IPost {
    "id": number;
    "username": string;
    "created_datetime": Date;
    "title": string;
    "content": string;
}

interface IFormValues {
  title: string;
  content: string;
}

export default function Home () {
  const { user } = useAuth();

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<IFormValues>();

  const [showModalEdit, setShowModalEdit] = useState(false);
  const [showModalConfirmDelete, setShowModalConfirmDelete] = useState(false);
  const [idSelect, setIdSelect] = useState(0);

  const [posts, setPosts] = useState<IPost[]>([]);

  const loadPosts = async () => {
    const response = await axios.get('https://dev.codeleap.co.uk/careers/?limit=10&offset=1');

    console.log(response);
    setPosts(response.data.results);
  }

  const handleCreatePost = async (values: IFormValues) => {
    try {
      const response = await axios.post('https://dev.codeleap.co.uk/careers/', {
        username: 'leandro-wrocha',
        ...values,
      });

      if (response.status === 201) {
        loadPosts();
      }
    } catch (error) {
      console.log(error);
    }
  }

  const handleDelete = async (id: number) => {
    try {
      const response = await axios.post(`https://dev.codeleap.co.uk/careers/${id}`);

      loadPosts();
      setIdSelect(0);
      setShowModalConfirmDelete(false);
    } catch (error) {

    }
  }

  useEffect(() => {
    loadPosts();
  }, []);

  return (
    <>
      <Head>
        <title>Home - CodeLeap</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <main className={styles.container}>
        <div>
          <header>
            <label>CodeLeap Network</label>
          </header>

          <form onSubmit={handleSubmit(handleCreatePost)}>
            <span>What&apos;s on yout mind</span>

            <div className={styles.formInputs}>
              <div>
                <label>Title</label>
                <input {...register('title')} placeholder="title" />
                {errors.title && (
                  <span>{errors.title.message}</span>
                )}
              </div>

              <div>
                <label>Content</label>
                <textarea {...register('content')} placeholder="content here" />
                {errors.content && (
                  <span>{errors.content.message}</span>
                )}
              </div>
            </div>

            <div className={styles.formButtons}>
              <button>
                <span>Create</span>
              </button>
            </div>
          </form>

          <div className={styles.postList}>
            {posts.length > 1 && posts.map((post) => (
              <div className={styles.post} key={post.id}>
                <header>
                  <label>{post.title}</label>

                  { 'leandro-wrocha' === post.username  && (
                    <div>
                      <FaTrash onClick={() => {
                        setShowModalConfirmDelete(true)
                        setIdSelect(post.id);  
                      }} />

                      <FaEdit onClick={() => setShowModalEdit(true)}/>
                    </div>
                  )}
                </header>

                <div>
                  <div>
                    <span>@{post.username}</span>

                    <span>{new Date(post.created_datetime).toDateString()}</span>
                  </div>

                  <p>{post.content}</p>
                </div>
              </div>
            ))}
          </div>

          <div className="lds-roller">
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
        </div>
      </main>

      <ModalConfirmDelete
        show={showModalConfirmDelete}
        onHide={() => {
          setShowModalConfirmDelete(false);
        }}
        onDelete={() => {
          handleDelete(idSelect);
        }}
      />

      <ModalEditPost
        show={showModalEdit}
        onHide={() => {
          setShowModalEdit(false);
        }}
        postId={idSelect}
        loadPosts={() => loadPosts()}
      />
    </>
  )
}